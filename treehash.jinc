from XMSS require "hash_address/hash_address.jinc"
from XMSS require "xmss_commons/xmss_commons.jinc"

param int TRUE = 1;
param int FALSE = 0;

inline
fn __treehash_cond(reg ptr u32[XMSS_TREE_HEIGHT + 1] heights, 
                   #public reg u64 offset) -> reg u8 {
    reg bool c1 c2;
    reg u8 bc1 res;
    reg u32 a b;

    ?{ ">=u" = c1 } = #CMP_64(offset, 2);
    bc1 = #SETcc(c1);

    if (bc1 == 0) { 
        res = bc1;
    } else {
        a = heights[offset - 1];
        b = heights[offset - 2];

        ?{ "==" = c2} = #CMP_32(a, b);

        res = #SETcc(c2);
    }

    return res;
}


inline 
fn __treehash(
    reg ptr u8[XMSS_N] root,
    reg ptr u8[XMSS_N] sk_seed,
    reg ptr u8[XMSS_N] pub_seed,
    reg u32 start_index target_height, 
    reg ptr u32[8] subtree_addr
) -> reg ptr u8[XMSS_N]
{
    stack u8[(XMSS_TREE_HEIGHT + 1) * XMSS_N] _stack;   
    stack u32[(XMSS_TREE_HEIGHT + 1)] heights;
    stack u32[8] ots_addr ltree_addr node_addr;
    stack u8[XMSS_N] buf;
    stack u8[2 * XMSS_N] buf2;

    reg u32 i upper_bound t32 u tree_idx;
    reg u64 t64;
    reg u64 offset = 0;
    reg u8 val;
    
    reg u8 cond;

    inline int j;

    () = #spill(root, offset, start_index, sk_seed, pub_seed);

    stack u32[8] ots_addr = #copy(subtree_addr);
    stack u32[8] ltree_addr = #copy(subtree_addr);
    stack u32[8] node_addr = #copy(subtree_addr);

    ots_addr = __set_type(ots_addr, XMSS_ADDR_TYPE_OTS);
    ltree_addr = __set_type(ltree_addr, XMSS_ADDR_TYPE_LTREE);
    node_addr = __set_type(node_addr, XMSS_ADDR_TYPE_HASHTREE);

    target_height = target_height; 

    i = 0;
    upper_bound = 1; upper_bound <<= (target_height & 31);

    while (i < upper_bound) {
        () = #spill(i, upper_bound);

        () = #unspill(start_index);
        t32 = start_index; t32 += i;
        ltree_addr = __set_ltree_addr(ltree_addr, t32);

        ots_addr = __set_ots_addr(ots_addr, t32);

        () = #unspill(sk_seed, pub_seed);
        buf, ltree_addr, ots_addr = __gen_leaf_wots_(buf, sk_seed, pub_seed, ltree_addr, ots_addr);

        () = #unspill(offset);
        
        t64 = offset; 
        #inline if (XMSS_N == 32) {
            t64 <<= 5;
        } else {
            t64 *= XMSS_N;
        }

        _stack = memcpy_u8u8_3_treehash::__memcpy_u8u8_3(_stack, buf, t64, XMSS_N);

        () = #unspill(offset);
        offset += 1;
        heights[offset - 1] = 0;
        () = #spill(offset);

        while { cond = __treehash_cond(heights, offset); } (cond == 1) {
            () = #unspill(start_index, i); 
            tree_idx = start_index; tree_idx += i;
            u = heights[offset - 1]; u += 1; 

            tree_idx >>= u & 31;

            node_addr = __set_tree_height(node_addr, heights[offset - 1]);

            node_addr = __set_tree_index(node_addr, tree_idx);

            () = #unspill(offset);
            
            t64 = offset; t64 -= 2; 
            #inline if (XMSS_N == 32) {
	            t64 <<= 5;
            } else {
	            t64 *= XMSS_N;
            }
            () = #spill(t64);

            buf2, _ = memcpy_u8u8_2_treehash::__memcpy_u8u8_2(buf2, _stack, t64, 2 * XMSS_N);

            () = #unspill(pub_seed);
            buf, node_addr = __thash_h_(buf, buf2, pub_seed, node_addr);

            () = #unspill(offset);
            
            () = #unspill(t64);

            _stack = memcpy_u8u8_3_treehash::__memcpy_u8u8_3(_stack, buf, t64, XMSS_N);

            () = #unspill(offset);
            offset -= 1;
            heights[offset - 1] += 1;
            () = #spill(offset);
        }

        () = #unspill(i, upper_bound);
        i += 1;
    }

    () = #unspill(root);

    if XMSS_N % 8 == 0 {
        for j=0 to XMSS_N/8 {
            root.[:u64 8*j] = _stack[:u64 j];
        }
    } else {
        for j=0 to XMSS_N {
            root[j] = _stack[j];
        }
    }


    return root;
}

fn _treehash(
    reg ptr u8[XMSS_N] node,
    reg ptr u8[XMSS_N] sk_seed,
    reg ptr u8[XMSS_N] pub_seed,
    reg u32 s t,
    reg ptr u32[8] subtree_addr
) -> reg ptr u8[XMSS_N]
{
    node = __treehash(node, sk_seed, pub_seed, s, t, subtree_addr);
    return node;
}

inline 
fn __treehash_(
    reg ptr u8[XMSS_N] node,
    reg ptr u8[XMSS_N] sk_seed,
    reg ptr u8[XMSS_N] pub_seed,
    reg u32 s t,
    reg ptr u32[8] subtree_addr
) -> reg ptr u8[XMSS_N]
{
    node = node;
    sk_seed = sk_seed;
    pub_seed = pub_seed;
    s = s;
    t = t;
    subtree_addr = subtree_addr;

    node = _treehash(node, sk_seed, pub_seed, s, t, subtree_addr);

    node = node;

    return node;
}


inline 
fn __build_auth_path(
    reg ptr u8[XMSS_TREE_HEIGHT * XMSS_N] auth_path,
    reg ptr u8[XMSS_N] sk_seed pub_seed,
    reg u32 i,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_TREE_HEIGHT * XMSS_N]
{
    reg u64 j k;
    reg u32 j32 k32;
    reg u64 subarray_start_index;
    reg ptr u8[XMSS_N] node;

    () = #spill(i, auth_path, sk_seed, pub_seed, addr);

    j = 0;
    while (j < XMSS_TREE_HEIGHT) {
        () = #unspill(i);
        () = #spill(j);

        k = (64u) i;
        k >>= (j & 63); 
        k ^= 1; 
        k <<= (j & 63);

        () = #unspill(auth_path, j);

        #inline if (XMSS_N == 32) { 
            subarray_start_index = j;
            subarray_start_index <<= 5;
        } else {
            subarray_start_index = j;
            subarray_start_index *= XMSS_N;
        }

        () = #unspill(sk_seed, pub_seed, addr);
        j32 = (32u) j;
        k32 = (32u) k;

        auth_path[subarray_start_index : XMSS_N] = 
            __treehash(auth_path[subarray_start_index : XMSS_N], sk_seed, pub_seed, k32, j32, addr);

        () = #spill(auth_path);
        () = #unspill(j);
        
        j += 1;
    }

    () = #unspill(auth_path);

    return auth_path;
}

inline 
fn __tree_sig(
    reg ptr u8[XMSS_WOTS_SIG_BYTES + (XMSS_TREE_HEIGHT * XMSS_N)] sig, // wots signature + auth_path
    reg ptr u8[XMSS_N] M,
    reg ptr u8[XMSS_SK_BYTES] sk,
    reg u32 idx_sig,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_WOTS_SIG_BYTES + (XMSS_TREE_HEIGHT * XMSS_N)],
     reg ptr u32[8] 
{
    reg ptr u8[XMSS_WOTS_SIG_BYTES] sig_ots = sig[0 : XMSS_WOTS_SIG_BYTES];
    reg ptr u8[XMSS_TREE_HEIGHT * XMSS_N] auth_path = sig[XMSS_WOTS_SIG_BYTES : XMSS_TREE_HEIGHT * XMSS_N];

    reg ptr u8[XMSS_N] pub_seed = sk[XMSS_INDEX_BYTES + 3 * XMSS_N : XMSS_N];
    reg ptr u8[XMSS_N] sk_seed  = sk[XMSS_INDEX_BYTES : XMSS_N];

    addr[4] = 0;

    () = #spill(sig, addr, idx_sig, M, pub_seed, sk_seed, sig_ots);

    auth_path = __build_auth_path(auth_path, sk_seed, pub_seed, idx_sig, addr);

    () = #spill(auth_path);
    () = #unspill(addr, idx_sig);

    addr = __set_type(addr, XMSS_ADDR_TYPE_OTS);

    addr = __set_ots_addr(addr, idx_sig);

    () = #unspill(M, pub_seed, sk_seed, sig_ots);
    sig_ots, addr = __wots_sign(sig_ots, M, sk_seed, pub_seed, addr);

    () = #unspill(sig, auth_path);

    sig[0 : XMSS_WOTS_SIG_BYTES] = sig_ots;
    sig[XMSS_WOTS_SIG_BYTES : (XMSS_TREE_HEIGHT * XMSS_N)] = auth_path;

    return sig, addr;
}

fn 
_tree_sig(
    reg ptr u8[XMSS_WOTS_SIG_BYTES + (XMSS_TREE_HEIGHT * XMSS_N)] sig, 
    reg ptr u8[XMSS_N] M,
    reg ptr u8[XMSS_SK_BYTES] sk,
    reg u32 idx_sig,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_WOTS_SIG_BYTES + (XMSS_TREE_HEIGHT * XMSS_N)],
     reg ptr u32[8]
{
    sig, addr = __tree_sig(sig, M, sk, idx_sig, addr);
    return sig, addr;
}

inline 
fn __tree_sig_(
    reg ptr u8[XMSS_WOTS_SIG_BYTES + (XMSS_TREE_HEIGHT * XMSS_N)] sig, 
    reg ptr u8[XMSS_N] M,
    reg ptr u8[XMSS_SK_BYTES] sk,
    reg u32 idx_sig,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_WOTS_SIG_BYTES + (XMSS_TREE_HEIGHT * XMSS_N)], 
     reg ptr u32[8]
{
    sig = sig;
    M = M;
    sk = sk;
    idx_sig = idx_sig;
    addr = addr;

    sig, addr = __tree_sig(sig, M, sk, idx_sig, addr);
    
    sig = sig;
    addr = addr;

    return sig, addr;
}
